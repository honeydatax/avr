	.file	"incmp.c"
__SP_H__ = 0x3e
__SP_L__ = 0x3d
__SREG__ = 0x3f
__tmp_reg__ = 0
__zero_reg__ = 1
	.text
.global	incmp
	.type	incmp, @function
incmp:
	push r28
	push r29
	in r28,__SP_L__
	in r29,__SP_H__
	sbiw r28,10
	in __tmp_reg__,__SREG__
	cli
	out __SP_H__,r29
	out __SREG__,__tmp_reg__
	out __SP_L__,r28
/* prologue: function */
/* frame size = 10 */
/* stack size = 12 */
.L__stack_usage = 12
	std Y+8,r25
	std Y+7,r24
	std Y+10,r23
	std Y+9,r22
	std Y+2,__zero_reg__
	std Y+1,__zero_reg__
	std Y+4,__zero_reg__
	std Y+3,__zero_reg__
	std Y+6,__zero_reg__
	std Y+5,__zero_reg__
	rjmp .L2
.L7:
	ldd r24,Y+1
	ldd r25,Y+2
	ldd r18,Y+7
	ldd r19,Y+8
	add r24,r18
	adc r25,r19
	mov r30,r24
	mov r31,r25
	ld r20,Z
	ldd r24,Y+1
	ldd r25,Y+2
	ldd r18,Y+9
	ldd r19,Y+10
	add r24,r18
	adc r25,r19
	mov r30,r24
	mov r31,r25
	ld r24,Z
	cp r20,r24
	brne .+2
	rjmp .L3
	ldd r24,Y+1
	ldd r25,Y+2
	ldd r18,Y+7
	ldd r19,Y+8
	add r24,r18
	adc r25,r19
	mov r30,r24
	mov r31,r25
	ld r20,Z
	ldd r24,Y+1
	ldd r25,Y+2
	ldd r18,Y+9
	ldd r19,Y+10
	add r24,r18
	adc r25,r19
	mov r30,r24
	mov r31,r25
	ld r24,Z
	cp r24,r20
	brge .L4
	ldi r24,lo8(1)
	ldi r25,0
	std Y+6,r25
	std Y+5,r24
.L4:
	ldd r24,Y+1
	ldd r25,Y+2
	ldd r18,Y+7
	ldd r19,Y+8
	add r24,r18
	adc r25,r19
	mov r30,r24
	mov r31,r25
	ld r20,Z
	ldd r24,Y+1
	ldd r25,Y+2
	ldd r18,Y+9
	ldd r19,Y+10
	add r24,r18
	adc r25,r19
	mov r30,r24
	mov r31,r25
	ld r24,Z
	cp r20,r24
	brge .L5
	ldi r24,lo8(-1)
	ldi r25,lo8(-1)
	std Y+6,r25
	std Y+5,r24
.L5:
	ldd r24,Y+1
	ldd r25,Y+2
	ldd r18,Y+9
	ldd r19,Y+10
	add r24,r18
	adc r25,r19
	mov r30,r24
	mov r31,r25
	ld r24,Z
	tst r24
	brne .L6
	std Y+6,__zero_reg__
	std Y+5,__zero_reg__
.L6:
	ldi r24,lo8(1)
	ldi r25,0
	std Y+4,r25
	std Y+3,r24
.L3:
	ldd r24,Y+1
	ldd r25,Y+2
	adiw r24,1
	std Y+2,r25
	std Y+1,r24
.L2:
	ldd r24,Y+3
	ldd r25,Y+4
	cpi r24,1
	cpc r25,__zero_reg__
	breq .+2
	rjmp .L7
	ldd r24,Y+5
	ldd r25,Y+6
/* epilogue start */
	adiw r28,10
	in __tmp_reg__,__SREG__
	cli
	out __SP_H__,r29
	out __SREG__,__tmp_reg__
	out __SP_L__,r28
	pop r29
	pop r28
	ret
	.size	incmp, .-incmp
	.section	.rodata
.LC0:
	.string	"hello world\n"
.LC1:
	.string	"hello"
	.text
.global	main
	.type	main, @function
main:
	push r28
	push r29
	rcall .
	rcall .
	rcall .
	in r28,__SP_L__
	in r29,__SP_H__
/* prologue: function */
/* frame size = 6 */
/* stack size = 8 */
.L__stack_usage = 8
	std Y+2,__zero_reg__
	std Y+1,__zero_reg__
	ldi r24,lo8(.LC0)
	ldi r25,hi8(.LC0)
	std Y+4,r25
	std Y+3,r24
	ldi r24,lo8(.LC1)
	ldi r25,hi8(.LC1)
	std Y+6,r25
	std Y+5,r24
	ldd r18,Y+5
	ldd r19,Y+6
	ldd r24,Y+3
	ldd r25,Y+4
	mov r22,r18
	mov r23,r19
	rcall incmp
	std Y+2,r25
	std Y+1,r24
	ldi r24,0
	ldi r25,0
/* epilogue start */
	adiw r28,6
	in __tmp_reg__,__SREG__
	cli
	out __SP_H__,r29
	out __SREG__,__tmp_reg__
	out __SP_L__,r28
	pop r29
	pop r28
	ret
	.size	main, .-main
	.ident	"GCC: (GNU) 4.8.1"
.global __do_copy_data
